Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: demo-bucket-123411

  UploadFiles:
    Type: Custom::S3Upload
    Properties:
      ServiceToken: !GetAtt UploadLambda.Arn
      BucketName: !Ref S3Bucket
      Files:
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/python_scripts/lambda_start.zip
          Destination: scripts/lambda_start.zip
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/python_scripts/lambda_status.zip
          Destination: scripts/lambda_status.zip
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/gluejob_scripts/job1.py
          Destination: scripts/job1.py

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${S3Bucket.Arn}/*'

  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import urllib.request

          s3 = boto3.client('s3')

          def handler(event, context):
            try:
              bucket = event['ResourceProperties']['BucketName']
              files = event['ResourceProperties']['Files']
              
              for file in files:
                urllib.request.urlretrieve(file['Source'], '/tmp/tempfile')
                s3.upload_file('/tmp/tempfile', bucket, file['Destination'])
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Runtime: python3.8

  StartCrawlerFunction:
    Type: AWS::Lambda::Function
    DependsOn: UploadFiles
    Properties:
      FunctionName: start-crawler-function
      Handler: lambda_start.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: scripts/lambda_start.zip
      Runtime: python3.8

  GetCrawlerStatusFunction:
    Type: AWS::Lambda::Function
    DependsOn: StartCrawlerFunction
    Properties:
      FunctionName: get-crawler-status
      Handler: lambda_status.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: scripts/lambda_status.zip
      Runtime: python3.8

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub '${S3Bucket.Arn}'
                  - !Sub '${S3Bucket.Arn}/*'

  UploadGlueScript:
    Type: Custom::S3Upload
    Properties:
      ServiceToken: !GetAtt UploadLambda.Arn
      BucketName: !Ref S3Bucket
      Files:
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/python_scripts/glue_job_script.py
          Destination: scripts/job1.py

  GlueJob:
    Type: AWS::Glue::Job
    DependsOn: UploadGlueScript
    Properties:
      Name: my-glue-job
      Role: !GetAtt GlueJobRole.Arn
      Command: 
        Name: glueetl
        ScriptLocation: !Sub 's3://${S3Bucket}/scripts/job1.py'
      DefaultArguments:
        '--job-language': 'python'
        '--job-bookmark-option': 'job-bookmark-enable'
      GlueVersion: '3.0'
      MaxRetries: 0
      Timeout: 2880
      NumberOfWorkers: 2
      WorkerType: 'G.1X'

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt GlueJob.Arn
                  - !GetAtt StartCrawlerFunction.Arn
                  - !GetAtt GetCrawlerStatusFunction.Arn

  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "A description of my state machine",
            "StartAt": "Glue StartJobRun",
            "States": {
              "Glue StartJobRun": {
                "Type": "Task",
                "Resource": "arn:aws:states:::glue:startJobRun.sync",
                "Parameters": {
                  "JobName": "${GlueJobName}"
                },
                "Next": "crawler1start"
              },
              "crawler1start": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "FunctionName": "${StartCrawlerFunctionArn}",
                  "Payload": {
                    "crawlername": "crawler1"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ],
                "Next": "crawler1status"
              },
              "crawler1status": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${GetCrawlerStatusFunctionArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              }
            }
          }
        - GlueJobName: !Ref GlueJob
          StartCrawlerFunctionArn: !GetAtt StartCrawlerFunction.Arn
          GetCrawlerStatusFunctionArn: !GetAtt GetCrawlerStatusFunction.Arn
