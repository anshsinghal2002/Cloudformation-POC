Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucket-with-files

  UploadFiles:
    Type: Custom::S3Upload
    Properties:
      ServiceToken: !GetAtt UploadLambda.Arn
      BucketName: !Ref S3Bucket
      Files:
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/python_scripts/lambda_function.py
          Destination: scripts/lambda_start.py
        - Source: https://raw.githubusercontent.com/anshsinghal2002/Cloudformation-POC/main/python_scripts/lambda_handler.py
          Destination: scripts/lambda_status.py

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub '${S3Bucket.Arn}/*'

  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import urllib.request

          s3 = boto3.client('s3')

          def handler(event, context):
            try:
              bucket = event['ResourceProperties']['BucketName']
              files = event['ResourceProperties']['Files']
              
              for file in files:
                urllib.request.urlretrieve(file['Source'], '/tmp/tempfile')
                s3.upload_file('/tmp/tempfile', bucket, file['Destination'])
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Runtime: python3.8